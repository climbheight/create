#include <stdio.h>
#include <stdlib.h>
#include <time.h>

typedef struct Node {
    int num;
    int password;
    struct Node *next;
} Node;

Node* createNode(int num, int password) {
    Node* newNode =(Node*) malloc(sizeof(Node));
    newNode->num = num;
    newNode->password = password;
    newNode->next = NULL;
    return newNode;
}

Node* buildCircularList(int n, int passwords[]) {
    Node *head = createNode(1, passwords[0]);
    Node *cur = head;
    for (int i=1; i<n; i++) {
        cur->next = createNode(i+1, passwords[i]);
        cur = cur->next;
    }
    cur->next = head;
    return head;
}

void josephusCircleList(Node* head, int m) {
    Node *cur = head, *prev = NULL;
    while (cur->next != cur) {
        for (int i=1; i<m; i++) {
            prev = cur;
            cur = cur->next;
        }
        
        m = cur->password;
        prev->next = cur->next;
        free(cur);
        cur = prev->next;
    }
    free(cur);
}

void josephusCircleArray(int n, int passwords[], int m) {
    int *arr = (int*)malloc(n * sizeof(int));
    for (int i=0; i<n; i++) arr[i] = i+1;
    int index = 0, count = n;
    while (count > 1) {
        index = (index + m -1) % count;
       
        m = passwords[arr[index]-1];
        for (int i=index; i<count-1; i++) arr[i] = arr[i+1];
        count--;
    }
    free(arr);
}

int main() {
    FILE *fp = fopen("results.txt", "w");
    srand(time(NULL));
    int start_n = 1000, max_n = 500000, step = 1000;
    for (int n = start_n; n <= max_n; n += step) {
        int m = rand() % 500000 + 1;
        int *passwords = (int*)malloc(n * sizeof(int));
        for (int i=0; i<n; i++) passwords[i] = rand() % 500000 + 1;

        Node *head = buildCircularList(n, passwords);
        clock_t start = clock();
        josephusCircleList(head, m);
        double t1 = (clock() - start) / (double)CLOCKS_PER_SEC;

        start = clock();
        josephusCircleArray(n, passwords, m);
        double t2 = (clock() - start) / (double)CLOCKS_PER_SEC;

        free(passwords);
        fprintf(fp, "%d, %f, %f\n", n, t1, t2);
        printf("n = %d, 链表时间: %f, 数组时间: %f\n", n, t1, t2);
    }
    fclose(fp);
    return 0;
}
