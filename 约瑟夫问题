#include <stdio.h>
#include <stdlib.h>

// 定义一个结构体来存储每个人的信息，包括编号和密码
typedef struct {
    int id;         // 人的编号
    int password;   // 人的密码
} Person;

// 解决带有密码的约瑟夫环问题
void josephusWithPassword(int n, int m, Person *people) {
    int count = 0;  // 记录出列的人数
    int current = 0;  // 当前报数的人的索引

    while (count < n) {
        // 找到第 m 个还在圈中的人
        int step = 0;
        while (step < m) {
            if (people[current].id != 0) {
                step++;
            }
            if (step < m) {
                current = (current + 1) % n;
            }
        }

        // 标记该人出列，将其编号置为 0
        printf("第 %d 个出列的是：%d\n", count + 1, people[current].id);
        m = people[current].password;  // 更新 m 为出列人的密码
        people[current].id = 0;        // 标记该人已出列
        count++;

        // 找到下一个还在圈中的人，作为下一轮报数的起点
        while (people[current].id == 0) {
            current = (current + 1) % n;
        }
    }
}

int main() {
    int n, m;
    printf("请输入总人数 n: ");
    scanf("%d", &n);

    Person *people = (Person *)malloc(n * sizeof(Person));
    if (people == NULL) {
        fprintf(stderr, "内存分配失败\n");
        return 1;
    }

    // 初始化人的编号和输入密码
    for (int i = 0; i < n; i++) {
        people[i].id = i + 1;
        printf("请输入第 %d 个人的密码: ", i + 1);
        scanf("%d", &people[i].password);
    }

    printf("请输入初始报数的 m 值: ");
    scanf("%d", &m);

    // 调用函数解决带有密码的约瑟夫环问题
    josephusWithPassword(n, m, people);

    free(people);
    return 0;
}
